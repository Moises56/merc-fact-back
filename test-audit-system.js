// Script para verificar y diagnost    // 2. Verificar logs inmediatamente despu√©s del login
    console.log('2Ô∏è‚É£ Verificando logs de auditor√≠a despu√©s del login...');
    await new Promise(resolve => setTimeout(resolve, 1000)); // Esperar 1 segundo
    
    const logsResponse = await axiosInstance.get('/api/audit/logs?limit=5'); sistema de auditor√≠a
const axios = require('axios');

async function testAuditSystem() {
  const baseUrl = 'http://localhost:3000';
  let cookies = '';
  
  // Configurar axios para manejar cookies
  const axiosInstance = axios.create({
    baseURL: baseUrl,
    withCredentials: true,
  });
  
  try {
    console.log('üß™ Iniciando diagn√≥stico del sistema de auditor√≠a...\n');

    // 1. Login para obtener token
    console.log('1Ô∏è‚É£ Realizando login para obtener token...');
    const loginResponse = await axiosInstance.post('/api/auth/login', {
      username: 'mougrind',
      contrasena: '@Asd.456@'
    });
    
    // Extraer cookies de la respuesta
    const setCookieHeaders = loginResponse.headers['set-cookie'];
    if (setCookieHeaders) {
      cookies = setCookieHeaders.map(cookie => cookie.split(';')[0]).join('; ');
      axiosInstance.defaults.headers.Cookie = cookies;
    }
    
    console.log('‚úÖ Login exitoso');
    console.log('üìÑ Respuesta completa del login:', JSON.stringify(loginResponse.data, null, 2));
    console.log('üç™ Cookies establecidas:', cookies);
    console.log('');

    // 2. Verificar logs inmediatamente despu√©s del login
    console.log('2Ô∏è‚É£ Verificando logs de auditor√≠a despu√©s del login...');
    await new Promise(resolve => setTimeout(resolve, 1000)); // Esperar 1 segundo
    
    const logsResponse = await axios.get(`${baseUrl}/api/audit/logs?limit=5`, {
      headers: { 'Authorization': `Bearer ${accessToken}` }
    });
    
    console.log(`üìä Total de logs encontrados: ${logsResponse.data.total}`);
    if (logsResponse.data.data.length > 0) {
      console.log('üéâ ¬°Sistema de auditor√≠a funcionando!');
      console.log('üìã √öltimos logs:');
      logsResponse.data.data.forEach((log, index) => {
        console.log(`   ${index + 1}. ${log.accion} en ${log.tabla} por ${log.user.nombre} (${new Date(log.createdAt).toLocaleString()})`);
      });
    } else {
      console.log('‚ùå No se encontraron logs de auditor√≠a');
    }
    console.log('');

    // 3. Realizar acci√≥n que debe generar log (consultar dashboard)
    console.log('3Ô∏è‚É£ Ejecutando acci√≥n que debe generar log de auditor√≠a...');
    await axios.get(`${baseUrl}/api/dashboard/statistics`, {
      headers: { 'Authorization': `Bearer ${accessToken}` }
    });
    console.log('‚úÖ Acci√≥n ejecutada (consulta dashboard)\n');

    // 4. Verificar si se cre√≥ el nuevo log
    console.log('4Ô∏è‚É£ Verificando nuevos logs despu√©s de la acci√≥n...');
    await new Promise(resolve => setTimeout(resolve, 1000)); // Esperar 1 segundo
    
    const newLogsResponse = await axios.get(`${baseUrl}/api/audit/logs?limit=5`, {
      headers: { 'Authorization': `Bearer ${accessToken}` }
    });
    
    console.log(`üìä Total de logs encontrados: ${newLogsResponse.data.total}`);
    if (newLogsResponse.data.total > logsResponse.data.total) {
      console.log('üéâ ¬°Nuevo log de auditor√≠a creado exitosamente!');
    } else {
      console.log('‚ö†Ô∏è No se detectaron nuevos logs de auditor√≠a');
    }
    
    // 5. Mostrar estad√≠sticas de auditor√≠a
    console.log('\n5Ô∏è‚É£ Obteniendo estad√≠sticas de auditor√≠a...');
    const statsResponse = await axios.get(`${baseUrl}/api/audit/stats`, {
      headers: { 'Authorization': `Bearer ${accessToken}` }
    });
    
    console.log('üìà Estad√≠sticas de auditor√≠a:');
    console.log(`   ‚Ä¢ Total de logs: ${statsResponse.data.total_logs}`);
    console.log(`   ‚Ä¢ Usuarios activos: ${statsResponse.data.unique_users}`);
    console.log(`   ‚Ä¢ Acciones m√°s comunes:`, statsResponse.data.most_common_actions);
    
    // 6. Test de creaci√≥n manual de log
    console.log('\n6Ô∏è‚É£ Creando log de auditor√≠a manual...');
    const manualLogResponse = await axios.post(`${baseUrl}/api/audit`, {
      accion: 'TEST_MANUAL',
      tabla: 'test',
      registroId: 'test-123',
      datosAntes: JSON.stringify({ test: 'before' }),
      datosDespues: JSON.stringify({ test: 'after' })
    }, {
      headers: { 'Authorization': `Bearer ${accessToken}` }
    });
    
    console.log('‚úÖ Log manual creado exitosamente:', manualLogResponse.data.id);
    
    console.log('\nüéâ Diagn√≥stico completado exitosamente!');
    
  } catch (error) {
    console.error('\n‚ùå Error durante el diagn√≥stico:', error.message);
    if (error.response) {
      console.error('   Status:', error.response.status);
      console.error('   Data:', error.response.data);
    }
    
    // Diagn√≥stico adicional
    console.log('\nüîç Diagn√≥stico adicional:');
    console.log(`   ‚Ä¢ Token disponible: ${accessToken ? 'S√≠' : 'No'}`);
    console.log(`   ‚Ä¢ Servidor respondiendo: ${error.code !== 'ECONNREFUSED' ? 'S√≠' : 'No'}`);
    
    if (error.response?.status === 401) {
      console.log('   ‚Ä¢ Problema: Token inv√°lido o expirado');
    } else if (error.response?.status === 404) {
      console.log('   ‚Ä¢ Problema: Endpoint no encontrado');
    } else if (error.code === 'ECONNREFUSED') {
      console.log('   ‚Ä¢ Problema: Servidor no est√° ejecut√°ndose');
    }
  }
}

// Funci√≥n para monitorear logs en tiempo real
async function monitorAuditLogs() {
  const baseUrl = 'http://localhost:3000';
  
  try {
    console.log('üëÄ Iniciando monitoreo de logs de auditor√≠a...');
    console.log('   (Ejecuta acciones en otra terminal para ver los logs)\n');
    
    // Login
    const loginResponse = await axios.post(`${baseUrl}/api/auth/login`, {
      correo: 'user@mercados.com',
      contrasena: 'password123'
    });
    
    const accessToken = loginResponse.data.access_token;
    let lastLogCount = 0;
    
    setInterval(async () => {
      try {
        const logsResponse = await axios.get(`${baseUrl}/api/audit/logs?limit=3`, {
          headers: { 'Authorization': `Bearer ${accessToken}` }
        });
        
        if (logsResponse.data.total > lastLogCount) {
          console.log(`üÜï Nuevo log detectado! Total: ${logsResponse.data.total}`);
          const latestLog = logsResponse.data.data[0];
          console.log(`   üìù ${latestLog.accion} en ${latestLog.tabla} por ${latestLog.user.nombre} - ${new Date(latestLog.createdAt).toLocaleTimeString()}`);
          lastLogCount = logsResponse.data.total;
        }
      } catch (error) {
        console.error('Error en monitoreo:', error.message);
      }
    }, 2000); // Verificar cada 2 segundos
    
  } catch (error) {
    console.error('Error iniciando monitoreo:', error.message);
  }
}

// Determinar qu√© funci√≥n ejecutar basado en argumentos
const mode = process.argv[2];

if (mode === 'monitor') {
  monitorAuditLogs();
} else {
  testAuditSystem();
}
