// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// NOTA: SQL Server no soporta enums nativos en Prisma
// Usaremos String con validaciones a nivel de aplicación y constraints de DB

model User {
  id              String   @id @default(uuid())
  correo          String   @unique
  username        String   @unique
  nombre          String
  apellido        String
  contrasena      String
  telefono        String?
  dni             String   @unique
  gerencia        String?
  numero_empleado Int?     @unique
  role            String   @default("USER") // USER, ADMIN, MARKET, USER-ADMIN
  isActive        Boolean  @default(true)
  lastLogin       DateTime?
  ubicacion       String?  // Ubicación asignada al usuario (ej: "Mall Multiplaza")
  
  // Relaciones
  createdFacturas Factura[] @relation("FacturaCreador")
  facturasAnuladas Factura[] @relation("FacturaAnulada")
  auditLogs       AuditLog[]
  consultaLogs    ConsultaLog[]
  userLocations   UserLocation[]
  assignedUserLocations UserLocation[] @relation("UserLocationAssignedBy")
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("users")
}

model Mercado {
  id             String  @id @default(uuid())
  nombre_mercado String  @unique
  direccion      String
  latitud        Float
  longitud       Float
  descripcion    String?
  isActive       Boolean @default(true)
  
  // Relaciones
  locales        Local[]
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@map("mercados")
}

model Local {
  id                String   @id @default(uuid())
  nombre_local      String?
  numero_local      String?  
  permiso_operacion String?
  tipo_local        String?  // Usar String en lugar de enum
  direccion_local   String?
  estado_local      String   @default("PENDIENTE") // Usar String en lugar de enum
  monto_mensual     Decimal? @db.Decimal(10, 2)
  propietario       String?
  dni_propietario   String?
  telefono          String?
  email             String?
  latitud           Float?
  longitud          Float?
  
  // Relaciones
  mercadoId         String
  mercado           Mercado   @relation(fields: [mercadoId], references: [id], onDelete: Cascade)
  facturas          Factura[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("locales")
}

model Factura {
  id                String   @id @default(uuid())
  numero_factura    String   @unique @default(uuid())
  correlativo       String   @unique
  concepto          String
  mes               String   // "2024-01", "2024-02", etc.
  anio              Int
  monto             Decimal  @db.Decimal(10, 2)
  estado            String   @default("PENDIENTE") // PENDIENTE, PAGADA, VENCIDA, ANULADA
  fecha_vencimiento DateTime
  fecha_pago        DateTime?
  observaciones     String?
  
  // Campos para anulación
  fecha_anulacion     DateTime?
  razon_anulacion     String?
  anulada_por_user_id String?
  
  // Información del local (desnormalizada para histórico)
  mercado_nombre    String
  local_nombre      String?
  local_numero      String?
  propietario_nombre String?
  propietario_dni   String?
  
  // Relaciones
  localId           String
  local             Local @relation(fields: [localId], references: [id])
  createdByUserId   String
  createdBy         User  @relation("FacturaCreador", fields: [createdByUserId], references: [id])
  anuladaBy         User? @relation("FacturaAnulada", fields: [anulada_por_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([localId, mes, anio])
  @@map("facturas")
}

model AuditLog {
  id          String   @id @default(uuid())
  accion      String   // CREATE, UPDATE, DELETE, LOGIN, LOGOUT
  tabla       String   // users, mercados, locales, facturas
  registroId  String?  // ID del registro afectado
  datosAntes  String?  // JSON con datos anteriores
  datosDespues String? // JSON con datos nuevos
  ip          String?
  userAgent   String?
  ubicacion   String?  // Ubicación del usuario
  
  // Relaciones
  userId      String
  user        User @relation(fields: [userId], references: [id])
  
  createdAt   DateTime @default(now())
  
  @@map("audit_logs")
}

model ConsultaLog {
  id              String   @id @default(uuid())
  consultaType    String   // EC, ICS
  consultaSubtype String   // normal, amnistia
  parametros      String   // JSON con parámetros de consulta (ics, dni, identidad, etc.)
  resultado       String?  // SUCCESS, ERROR, NOT_FOUND
  totalEncontrado Decimal? @db.Decimal(15, 2) // Total del resultado si fue exitoso
  errorMessage    String?  // Mensaje de error si falló
  ip              String?
  userAgent       String?
  duracionMs      Int?     // Duración de la consulta en milisegundos
  
  // Relaciones
  userId          String
  user            User @relation(fields: [userId], references: [id])
  
  createdAt       DateTime @default(now())
  
  @@index([userId, consultaType])
  @@index([userId, createdAt])
  @@index([consultaType, consultaSubtype])
  @@index([userId, consultaType, consultaSubtype])
  @@index([createdAt])
  @@map("consulta_logs")
}

model UserLocation {
  id           String   @id @default(uuid())
  locationName String   // "Mall Multiplaza", "Centro Histórico", etc.
  locationCode String?  // "MULT_001", "CENTRO_001", etc.
  description  String?
  isActive     Boolean  @default(true)
  assignedAt   DateTime @default(now())
  assignedBy   String?  // ID del usuario que asignó la ubicación
  
  // Relaciones
  userId       String
  user         User @relation(fields: [userId], references: [id])
  assignedByUser User? @relation("UserLocationAssignedBy", fields: [assignedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@unique([userId, isActive]) // Solo una ubicación activa por usuario
  @@map("user_locations")
}
